
	Лекция 11. Связный список (Linked List)

	Выглядит так (каждый узел в рандомном месте памяти):
	-------------------------------------------------------------------------------------------
	NULL	-->	[13]	-->	[26]	-->	[35]	-->	[41]	-->	NULL
	<--		<--		<--		<--		<--
	-------------------------------------------------------------------------------------------

	list_t
		head - 1.000.000 (адрес)
		size - 4 (кол-во элементов)

	node_t [13]
		value - 13
		next  - 1000
		prev  - NULL

	node_t [26]
		value - 26
		next  - 10500
		prev  - 1.000.000

	-------------------------------------------------------------------------------------------

	Список тратит в два раза больше памяти, чем вектор

	-----------------------------------------------------------------------------------------
	Как работает push_back():								|
		1. Дойти до кноца списка		   					|
		2. Выделить новый элемент с помощью malloc 					|
		3. Расставить связи (prev, next)	   					|
												|
	Если head = NULL:			   	   					|
		4. Установить head			   					|
	-----------------------------------------------------------------------------------------
												|
	Как работает insert():									|
		1. Создать новый элемент							|
		2. Обновить четыре ссылки		   					|
												|
		 d				 a						|
	[26]	-->	[НОВЫЙ_ЭЛЕМЕНТ]		-->	[35]					|
	[  ]	<--	[	      ]		<--	[  ]					|
		 b				 c						|
												|
	a. n->next = cur->next									|
	b. n->prev = cur									|
	c. cur->next->prev = n									|
	d. cur->next = n									|
	-----------------------------------------------------------------------------------------








